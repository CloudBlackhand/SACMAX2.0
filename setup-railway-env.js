#!/usr/bin/env node

/**
 * Script para configurar Railway PostgreSQL - SacsMax
 * Obt√©m e configura a DATABASE_URL do Railway
 */

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

console.log('üöÇ Configurando Railway PostgreSQL...\n');

async function setupRailwayEnvironment() {
    try {
        // Verificar se Railway CLI est√° instalado
        console.log('üìã Verificando Railway CLI...');
        try {
            execSync('railway --version', { stdio: 'pipe' });
            console.log('   ‚úÖ Railway CLI encontrado');
        } catch (error) {
            console.log('   ‚ùå Railway CLI n√£o encontrado');
            console.log('   üí° Instale com: npm install -g @railway/cli');
            return;
        }

        // Verificar login no Railway
        console.log('\nüîê Verificando login Railway...');
        try {
            execSync('railway whoami', { stdio: 'pipe' });
            console.log('   ‚úÖ Logado no Railway');
        } catch (error) {
            console.log('   ‚ùå N√£o logado no Railway');
            console.log('   üí° Fa√ßa login com: railway login');
            return;
        }

        // Obter DATABASE_URL do Railway
        console.log('\nüåê Obtendo DATABASE_URL do Railway...');
        try {
            const dbUrl = execSync('railway variables get DATABASE_URL', { 
                encoding: 'utf8',
                stdio: 'pipe' 
            }).trim();
            
            if (dbUrl) {
                console.log('   ‚úÖ DATABASE_URL obtida do Railway');
                
                // Atualizar arquivo .env
                const envPath = path.join(__dirname, '.env');
                let envContent = '';
                
                if (fs.existsSync(envPath)) {
                    envContent = fs.readFileSync(envPath, 'utf8');
                }

                // Remover DATABASE_URL antiga se existir
                const lines = envContent.split('\n').filter(line => 
                    !line.startsWith('DATABASE_URL=') && 
                    !line.startsWith('DATABASE_PUBLIC_URL=')
                );

                // Adicionar nova DATABASE_URL
                lines.push(`DATABASE_URL=${dbUrl}`);
                lines.push(`DATABASE_PUBLIC_URL=${dbUrl}`);

                fs.writeFileSync(envPath, lines.join('\n'));
                console.log('   ‚úÖ .env atualizado com DATABASE_URL');
                console.log(`   üìÑ URL: ${dbUrl.substring(0, 50)}...`);

            } else {
                console.log('   ‚ùå DATABASE_URL n√£o encontrada no Railway');
                console.log('   üí° Adicione um banco de dados PostgreSQL ao projeto');
                console.log('   üí° Ou configure manualmente: railway variables set DATABASE_URL "postgresql://..."');
            }

        } catch (error) {
            console.log('   ‚ùå Erro ao obter DATABASE_URL:', error.message);
            console.log('   üí° Verifique se h√° um banco de dados PostgreSQL configurado no Railway');
        }

        // Verificar vari√°veis Railway
        console.log('\nüìä Vari√°veis Railway atuais:');
        try {
            const variables = execSync('railway variables', { 
                encoding: 'utf8',
                stdio: 'pipe' 
            });
            console.log(variables);
        } catch (error) {
            console.log('   ‚ö†Ô∏è N√£o foi poss√≠vel listar vari√°veis');
        }

    } catch (error) {
        console.error('‚ùå Erro ao configurar Railway:', error.message);
    }
}

// Verificar se est√° em ambiente Railway
function checkRailwayEnvironment() {
    const isRailway = process.env.RAILWAY_ENVIRONMENT || process.env.RAILWAY_SERVICE_ID;
    
    console.log('\nüîç Verificando ambiente Railway...');
    console.log(`   Railway Environment: ${isRailway ? 'Sim' : 'N√£o'}`);
    console.log(`   Railway Service ID: ${process.env.RAILWAY_SERVICE_ID || 'N/A'}`);
    console.log(`   Railway Project ID: ${process.env.RAILWAY_PROJECT_ID || 'N/A'}`);
    
    return !!isRailway;
}

// Executar configura√ß√£o
if (require.main === module) {
    const isRailway = checkRailwayEnvironment();
    
    if (isRailway) {
        console.log('   üöÄ Executando em produ√ß√£o Railway');
        // Em produ√ß√£o, usar vari√°veis do Railway diretamente
    } else {
        console.log('   üè† Executando em desenvolvimento local');
        setupRailwayEnvironment();
    }
}

module.exports = { setupRailwayEnvironment, checkRailwayEnvironment };