# Multi-stage build otimizado para produção
FROM node:18-alpine AS dependencies

# Instalar dependências de compilação
RUN apk add --no-cache \
    python3 \
    py3-pip \
    python3-dev \
    py3-wheel \
    py3-setuptools \
    make \
    g++ \
    gcc \
    musl-dev \
    linux-headers \
    libc6-compat \
    libffi-dev \
    openssl-dev

WORKDIR /app

# Copiar arquivos de dependências
COPY package*.json ./
COPY python_modules/requirements.txt ./python_modules/

# Remove EXTERNALLY-MANAGED file to allow pip installs in Docker
RUN rm -f /usr/lib/python*/EXTERNALLY-MANAGED

# Atualizar pip e instalar dependências Python
RUN pip3 install --upgrade pip setuptools wheel && \
    pip3 install --no-cache-dir -r python_modules/requirements.txt

# Instalar dependências Node.js
RUN npm install --omit=dev --no-audit --no-fund

# Stage de build
FROM node:18-alpine AS build

WORKDIR /app

# Copiar dependências do stage anterior
COPY --from=dependencies /app/node_modules ./node_modules

# Copiar código fonte
COPY . .

# Stage final de produção
FROM node:18-alpine AS production

# Instalar runtime necessário e dependências Python
RUN apk add --no-cache python3 py3-pip py3-openpyxl py3-pandas py3-dateutil py3-xlrd

# Criar usuário não-root
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nodejs -u 1001

WORKDIR /app

# Copiar requirements.txt apenas para referência
COPY --from=build /app/python_modules/requirements.txt ./python_modules/

# Copiar dependências e código
COPY --from=dependencies /app/node_modules ./node_modules
COPY --from=build /app ./

# Criar diretórios com permissões
RUN mkdir -p uploads logs config && \
    chown -R nodejs:nodejs /app

USER nodejs

EXPOSE 3000

ENV NODE_ENV=production

CMD ["npm", "start"]