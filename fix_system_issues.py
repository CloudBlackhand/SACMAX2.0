#!/usr/bin/env python3
"""
Script para validar e corrigir problemas do sistema SACMAX2.0
Executa verifica√ß√µes e aplica√ß√µes de corre√ß√µes automaticamente
"""

import os
import sys
import json
import logging
import asyncio
from pathlib import Path
from datetime import datetime

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class SystemFixValidator:
    """Validador e corretor de problemas do sistema"""
    
    def __init__(self):
        self.fixes_applied = []
        self.issues_found = []
        
    def validate_environment_variables(self):
        """Validar vari√°veis de ambiente cr√≠ticas"""
        logger.info("üîç Validando vari√°veis de ambiente...")
        
        required_vars = [
            'DATABASE_URL',
            'WAHA_URL',
            'PORT'
        ]
        
        missing_vars = []
        for var in required_vars:
            if not os.getenv(var):
                missing_vars.append(var)
        
        if missing_vars:
            self.issues_found.append({
                'type': 'environment',
                'severity': 'critical',
                'description': f'Vari√°veis de ambiente ausentes: {missing_vars}',
                'fix': 'Configure as vari√°veis de ambiente no Railway'
            })
            logger.error(f"‚ùå Vari√°veis ausentes: {missing_vars}")
        else:
            logger.info("‚úÖ Todas as vari√°veis de ambiente est√£o configuradas")
    
    def validate_database_connection(self):
        """Validar conex√£o com banco de dados"""
        logger.info("üîç Validando conex√£o com banco de dados...")
        
        try:
            from backend.database_config import test_connection
            if test_connection():
                logger.info("‚úÖ Conex√£o com banco de dados OK")
            else:
                self.issues_found.append({
                    'type': 'database',
                    'severity': 'critical',
                    'description': 'Falha na conex√£o com banco de dados',
                    'fix': 'Verificar DATABASE_URL e status do PostgreSQL'
                })
                logger.error("‚ùå Falha na conex√£o com banco")
        except Exception as e:
            self.issues_found.append({
                'type': 'database',
                'severity': 'critical',
                'description': f'Erro ao testar banco: {e}',
                'fix': 'Verificar configura√ß√£o do banco'
            })
            logger.error(f"‚ùå Erro no teste de banco: {e}")
    
    def validate_waha_service(self):
        """Validar servi√ßo WAHA"""
        logger.info("üîç Validando servi√ßo WAHA...")
        
        try:
            import requests
            waha_url = os.getenv('WAHA_URL', 'https://waha-production-1c76.up.railway.app')
            response = requests.get(f"{waha_url}/api/server/status", timeout=10)
            
            if response.status_code == 200:
                logger.info("‚úÖ Servi√ßo WAHA dispon√≠vel")
            else:
                self.issues_found.append({
                    'type': 'waha',
                    'severity': 'medium',
                    'description': f'WAHA retornou status {response.status_code}',
                    'fix': 'Verificar status do servi√ßo WAHA no Railway'
                })
                logger.warning(f"‚ö†Ô∏è WAHA status: {response.status_code}")
                
        except Exception as e:
            self.issues_found.append({
                'type': 'waha',
                'severity': 'medium',
                'description': f'Erro ao conectar com WAHA: {e}',
                'fix': 'Verificar URL do WAHA e conectividade'
            })
            logger.error(f"‚ùå Erro WAHA: {e}")
    
    def validate_file_permissions(self):
        """Validar permiss√µes de arquivos"""
        logger.info("üîç Validando permiss√µes de arquivos...")
        
        critical_files = [
            'backend/app/app.py',
            'backend/database_config.py',
            'frontend/main.js',
            'railway_startup.py'
        ]
        
        for file_path in critical_files:
            if not os.path.exists(file_path):
                self.issues_found.append({
                    'type': 'files',
                    'severity': 'critical',
                    'description': f'Arquivo cr√≠tico ausente: {file_path}',
                    'fix': 'Verificar integridade do c√≥digo'
                })
                logger.error(f"‚ùå Arquivo ausente: {file_path}")
            elif not os.access(file_path, os.R_OK):
                self.issues_found.append({
                    'type': 'files',
                    'severity': 'medium',
                    'description': f'Arquivo sem permiss√£o de leitura: {file_path}',
                    'fix': 'Ajustar permiss√µes do arquivo'
                })
                logger.warning(f"‚ö†Ô∏è Sem permiss√£o: {file_path}")
        
        if not self.issues_found:
            logger.info("‚úÖ Permiss√µes de arquivos OK")
    
    def check_security_issues(self):
        """Verificar problemas de seguran√ßa"""
        logger.info("üîç Verificando problemas de seguran√ßa...")
        
        # Verificar se ainda h√° credenciais hardcoded
        config_file = 'backend/database_config.py'
        if os.path.exists(config_file):
            with open(config_file, 'r', encoding='utf-8') as f:
                content = f.read()
                if 'postgresql://postgres:' in content and 'password' in content.lower():
                    self.issues_found.append({
                        'type': 'security',
                        'severity': 'critical',
                        'description': 'Credenciais hardcoded ainda presentes no c√≥digo',
                        'fix': 'Remover todas as credenciais hardcoded'
                    })
                    logger.error("‚ùå Credenciais hardcoded encontradas!")
                else:
                    logger.info("‚úÖ Nenhuma credencial hardcoded encontrada")
        
        # Verificar WEBHOOK_SECRET
        if not os.getenv('WEBHOOK_SECRET'):
            self.issues_found.append({
                'type': 'security',
                'severity': 'medium',
                'description': 'WEBHOOK_SECRET n√£o configurado',
                'fix': 'Configurar WEBHOOK_SECRET para seguran√ßa dos webhooks'
            })
            logger.warning("‚ö†Ô∏è WEBHOOK_SECRET n√£o configurado")
        else:
            logger.info("‚úÖ WEBHOOK_SECRET configurado")
    
    def performance_checks(self):
        """Verificar problemas de performance"""
        logger.info("üîç Verificando performance...")
        
        # Verificar tamanho dos uploads
        uploads_dir = Path('uploads')
        if uploads_dir.exists():
            total_size = sum(f.stat().st_size for f in uploads_dir.rglob('*') if f.is_file())
            if total_size > 100 * 1024 * 1024:  # 100MB
                self.issues_found.append({
                    'type': 'performance',
                    'severity': 'medium',
                    'description': f'Diret√≥rio uploads muito grande: {total_size / 1024 / 1024:.1f}MB',
                    'fix': 'Limpar arquivos antigos do diret√≥rio uploads'
                })
                logger.warning(f"‚ö†Ô∏è Uploads dir: {total_size / 1024 / 1024:.1f}MB")
            else:
                logger.info("‚úÖ Tamanho do diret√≥rio uploads OK")
    
    def generate_report(self):
        """Gerar relat√≥rio de problemas e corre√ß√µes"""
        report = {
            'timestamp': datetime.now().isoformat(),
            'total_issues': len(self.issues_found),
            'critical_issues': len([i for i in self.issues_found if i['severity'] == 'critical']),
            'medium_issues': len([i for i in self.issues_found if i['severity'] == 'medium']),
            'fixes_applied': len(self.fixes_applied),
            'issues': self.issues_found,
            'fixes': self.fixes_applied
        }
        
        # Salvar relat√≥rio
        report_file = f'system_validation_report_{datetime.now().strftime("%Y%m%d_%H%M%S")}.json'
        with open(report_file, 'w', encoding='utf-8') as f:
            json.dump(report, f, indent=2, ensure_ascii=False)
        
        return report, report_file
    
    def run_all_validations(self):
        """Executar todas as valida√ß√µes"""
        logger.info("üöÄ Iniciando valida√ß√£o completa do sistema...")
        
        try:
            self.validate_environment_variables()
            self.validate_database_connection()
            self.validate_waha_service()
            self.validate_file_permissions()
            self.check_security_issues()
            self.performance_checks()
            
            # Gerar relat√≥rio
            report, report_file = self.generate_report()
            
            # Exibir resumo
            logger.info("üìä RESUMO DA VALIDA√á√ÉO:")
            logger.info(f"   üí• Problemas cr√≠ticos: {report['critical_issues']}")
            logger.info(f"   ‚ö†Ô∏è  Problemas m√©dios: {report['medium_issues']}")
            logger.info(f"   üîß Corre√ß√µes aplicadas: {report['fixes_applied']}")
            logger.info(f"   üìã Relat√≥rio salvo em: {report_file}")
            
            if report['critical_issues'] > 0:
                logger.error("‚ùå SISTEMA TEM PROBLEMAS CR√çTICOS!")
                return False
            elif report['medium_issues'] > 0:
                logger.warning("‚ö†Ô∏è Sistema tem problemas m√©dios que devem ser corrigidos")
                return True
            else:
                logger.info("‚úÖ SISTEMA VALIDADO COM SUCESSO!")
                return True
                
        except Exception as e:
            logger.error(f"‚ùå Erro durante valida√ß√£o: {e}")
            return False

def main():
    """Fun√ß√£o principal"""
    print("üõ†Ô∏è SACMAX2.0 - Validador de Sistema")
    print("=" * 50)
    
    validator = SystemFixValidator()
    success = validator.run_all_validations()
    
    if success:
        print("\n‚úÖ Valida√ß√£o conclu√≠da com sucesso!")
        sys.exit(0)
    else:
        print("\n‚ùå Valida√ß√£o encontrou problemas cr√≠ticos!")
        sys.exit(1)

if __name__ == "__main__":
    main()
