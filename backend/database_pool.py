#!/usr/bin/env python3
"""
Pool de Conex√µes PostgreSQL para SacsMax
Mant√©m conex√µes persistentes para alta responsividade
"""

import psycopg2
from psycopg2 import pool
from psycopg2.extras import RealDictCursor
import os
import logging
import threading
import time
from contextlib import contextmanager

logger = logging.getLogger(__name__)

class DatabasePool:
    """Pool de conex√µes PostgreSQL com reconex√£o autom√°tica"""
    
    def __init__(self, min_connections=5, max_connections=20):
        self.min_connections = min_connections
        self.max_connections = max_connections
        self.pool = None
        self.connection_params = None
        self.lock = threading.Lock()
        self.last_health_check = 0
        self.health_check_interval = 30  # segundos
        
    def initialize(self, connection_params):
        """Inicializar pool de conex√µes"""
        try:
            self.connection_params = connection_params
            
            # Criar pool de conex√µes
            if 'dsn' in connection_params:
                # Usar DSN (DATABASE_URL ou DATABASE_PUBLIC_URL)
                self.pool = psycopg2.pool.ThreadedConnectionPool(
                    minconn=self.min_connections,
                    maxconn=self.max_connections,
                    dsn=connection_params['dsn'],
                    cursor_factory=RealDictCursor
                )
            else:
                # Usar par√¢metros individuais
                self.pool = psycopg2.pool.ThreadedConnectionPool(
                    minconn=self.min_connections,
                    maxconn=self.max_connections,
                    **connection_params,
                    cursor_factory=RealDictCursor
                )
            
            logger.info(f"‚úÖ Pool de conex√µes PostgreSQL inicializado ({self.min_connections}-{self.max_connections} conex√µes)")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao inicializar pool de conex√µes: {e}")
            return False
    
    def get_connection_params(self):
        """Obter par√¢metros de conex√£o do Railway"""
        # Priorizar DATABASE_URL do Railway (conex√£o interna)
        database_url = os.environ.get('DATABASE_URL')
        if database_url:
            logger.info("üîó Usando DATABASE_URL para conex√£o interna")
            return {'dsn': database_url}
        
        # Fallback para DATABASE_PUBLIC_URL (conex√£o externa)
        database_public_url = os.environ.get('DATABASE_PUBLIC_URL')
        if database_public_url:
            logger.info("üîó Usando DATABASE_PUBLIC_URL para conex√£o externa")
            return {'dsn': database_public_url}
        
        # Fallback para par√¢metros individuais
        if os.environ.get('RAILWAY_ENVIRONMENT') or os.environ.get('PGHOST'):
            logger.info("üîó Usando par√¢metros individuais do Railway")
            return {
                'host': os.environ.get('PGHOST', 'localhost'),
                'port': os.environ.get('PGPORT', '5432'),
                'database': os.environ.get('PGDATABASE', 'railway'),
                'user': os.environ.get('PGUSER', 'postgres'),
                'password': os.environ.get('PGPASSWORD', ''),
                'sslmode': 'require'
            }
        else:
            # Fallback para desenvolvimento local
            logger.info("üîó Usando par√¢metros locais")
            return {
                'host': 'localhost',
                'port': '5432',
                'database': 'railway',
                'user': 'postgres',
                'password': '',
                'sslmode': 'disable'
            }
    
    @contextmanager
    def get_connection(self):
        """Obter conex√£o do pool com gerenciamento autom√°tico e retry"""
        conn = None
        max_retries = 3
        retry_count = 0
        
        while retry_count < max_retries:
            try:
                if not self.pool:
                    logger.info(f"Pool n√£o existe, tentando reconectar (tentativa {retry_count + 1})")
                    self._reconnect()
                
                if self.pool:
                    try:
                        conn = self.pool.getconn()
                        if conn:
                            # Verificar se conex√£o est√° ativa
                            if not self._is_connection_alive(conn):
                                logger.warning("Conex√£o morta detectada, obtendo nova")
                                self.pool.putconn(conn, close=True)
                                conn = self.pool.getconn()
                            
                            if conn and self._is_connection_alive(conn):
                                yield conn
                                return
                            else:
                                raise Exception("Conex√£o obtida n√£o est√° funcionando")
                        else:
                            raise Exception("Pool retornou conex√£o None")
                    except Exception as pool_error:
                        logger.error(f"Erro ao obter conex√£o do pool: {pool_error}")
                        raise pool_error
                else:
                    raise Exception("Pool de conex√µes n√£o foi criado")
                    
            except Exception as e:
                retry_count += 1
                logger.error(f"Erro na tentativa {retry_count}: {e}")
                
                if retry_count >= max_retries:
                    logger.error(f"Falha ap√≥s {max_retries} tentativas")
                    raise Exception(f"Falha ao obter conex√£o ap√≥s {max_retries} tentativas: {e}")
                
                # Aguardar antes de tentar novamente
                import time
                time.sleep(1 * retry_count)  # Backoff exponencial
                
        finally:
            if conn and self.pool:
                try:
                    self.pool.putconn(conn)
                except Exception as e:
                    logger.error(f"Erro ao retornar conex√£o ao pool: {e}")
    
    def _is_connection_alive(self, conn):
        """Verificar se conex√£o est√° ativa"""
        try:
            cursor = conn.cursor()
            cursor.execute("SELECT 1")
            cursor.fetchone()
            cursor.close()
            return True
        except:
            return False
    
    def _reconnect(self):
        """Reconectar pool de conex√µes"""
        with self.lock:
            try:
                logger.info("üîÑ Reconectando pool de conex√µes...")
                
                # Fechar pool existente
                if self.pool:
                    self.pool.closeall()
                
                # Obter par√¢metros de conex√£o
                if not self.connection_params:
                    self.connection_params = self.get_connection_params()
                
                # Recriar pool
                if 'dsn' in self.connection_params:
                    # Usar DSN (DATABASE_URL ou DATABASE_PUBLIC_URL)
                    self.pool = psycopg2.pool.ThreadedConnectionPool(
                        minconn=self.min_connections,
                        maxconn=self.max_connections,
                        dsn=self.connection_params['dsn'],
                        cursor_factory=RealDictCursor
                    )
                else:
                    # Usar par√¢metros individuais
                    self.pool = psycopg2.pool.ThreadedConnectionPool(
                        minconn=self.min_connections,
                        maxconn=self.max_connections,
                        **self.connection_params,
                        cursor_factory=RealDictCursor
                    )
                
                logger.info("‚úÖ Pool de conex√µes reconectado com sucesso")
                
            except Exception as e:
                logger.error(f"‚ùå Erro ao reconectar pool: {e}")
                self.pool = None
    
    def health_check(self):
        """Verificar sa√∫de do pool de conex√µes"""
        current_time = time.time()
        
        # Verificar apenas a cada intervalo
        if current_time - self.last_health_check < self.health_check_interval:
            return True
        
        self.last_health_check = current_time
        
        try:
            with self.get_connection() as conn:
                cursor = conn.cursor()
                cursor.execute("SELECT 1")
                cursor.fetchone()
                cursor.close()
                return True
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Health check falhou: {e}")
            self._reconnect()
            return False
    
    def execute_query(self, query, params=None):
        """Executar query com conex√£o do pool"""
        try:
            with self.get_connection() as conn:
                cursor = conn.cursor()
                cursor.execute(query, params)
                
                if query.strip().upper().startswith('SELECT'):
                    result = cursor.fetchall()
                    cursor.close()
                    return result
                else:
                    conn.commit()
                    cursor.close()
                    return True
                    
        except Exception as e:
            logger.error(f"Erro ao executar query: {e}")
            raise e
    
    def execute_many(self, query, params_list):
        """Executar m√∫ltiplas queries com conex√£o do pool"""
        try:
            with self.get_connection() as conn:
                cursor = conn.cursor()
                cursor.executemany(query, params_list)
                conn.commit()
                cursor.close()
                return True
        except Exception as e:
            logger.error(f"Erro ao executar m√∫ltiplas queries: {e}")
            raise e
    
    def close(self):
        """Fechar pool de conex√µes"""
        if self.pool:
            self.pool.closeall()
            logger.info("üîå Pool de conex√µes fechado")

# Inst√¢ncia global do pool
db_pool = DatabasePool()

def get_db_pool():
    """Obter inst√¢ncia global do pool"""
    return db_pool

def init_database_pool():
    """Inicializar pool de conex√µes"""
    connection_params = db_pool.get_connection_params()
    return db_pool.initialize(connection_params)

def close_database_pool():
    """Fechar pool de conex√µes"""
    db_pool.close()
